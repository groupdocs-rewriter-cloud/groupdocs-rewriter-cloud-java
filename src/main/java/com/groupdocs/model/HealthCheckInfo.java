/*
 * GroupDocs.Rewriter API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.7.0
 * Contact: anton.perhunov@aspose.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.groupdocs.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.groupdocs.JSON;

/**
 * HealthCheckInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-18T14:46:11.043203+03:00[Europe/Moscow]", comments = "Generator version: 7.14.0")
public class HealthCheckInfo {
  public static final String SERIALIZED_NAME_FILES_PROCESSOR_STATUS = "filesProcessorStatus";
  @SerializedName(SERIALIZED_NAME_FILES_PROCESSOR_STATUS)
  @javax.annotation.Nullable
  private String filesProcessorStatus;

  public static final String SERIALIZED_NAME_PARAPHRASING_STATUS = "paraphrasingStatus";
  @SerializedName(SERIALIZED_NAME_PARAPHRASING_STATUS)
  @javax.annotation.Nullable
  private String paraphrasingStatus;

  public static final String SERIALIZED_NAME_DETECTOR_STATUS = "detectorStatus";
  @SerializedName(SERIALIZED_NAME_DETECTOR_STATUS)
  @javax.annotation.Nullable
  private String detectorStatus;

  public static final String SERIALIZED_NAME_SUMMARIZATION_STATUS = "summarizationStatus";
  @SerializedName(SERIALIZED_NAME_SUMMARIZATION_STATUS)
  @javax.annotation.Nullable
  private String summarizationStatus;

  /**
   * Gets or Sets gpuInfoStatusCode
   */
  @JsonAdapter(GpuInfoStatusCodeEnum.Adapter.class)
  public enum GpuInfoStatusCodeEnum {
    CONTINUE("Continue"),
    
    SWITCHING_PROTOCOLS("SwitchingProtocols"),
    
    PROCESSING("Processing"),
    
    EARLY_HINTS("EarlyHints"),
    
    OK("OK"),
    
    CREATED("Created"),
    
    ACCEPTED("Accepted"),
    
    NON_AUTHORITATIVE_INFORMATION("NonAuthoritativeInformation"),
    
    NO_CONTENT("NoContent"),
    
    RESET_CONTENT("ResetContent"),
    
    PARTIAL_CONTENT("PartialContent"),
    
    MULTI_STATUS("MultiStatus"),
    
    ALREADY_REPORTED("AlreadyReported"),
    
    IM_USED("IMUsed"),
    
    MULTIPLE_CHOICES("MultipleChoices"),
    
    MOVED_PERMANENTLY("MovedPermanently"),
    
    FOUND("Found"),
    
    SEE_OTHER("SeeOther"),
    
    NOT_MODIFIED("NotModified"),
    
    USE_PROXY("UseProxy"),
    
    UNUSED("Unused"),
    
    TEMPORARY_REDIRECT("TemporaryRedirect"),
    
    PERMANENT_REDIRECT("PermanentRedirect"),
    
    BAD_REQUEST("BadRequest"),
    
    UNAUTHORIZED("Unauthorized"),
    
    PAYMENT_REQUIRED("PaymentRequired"),
    
    FORBIDDEN("Forbidden"),
    
    NOT_FOUND("NotFound"),
    
    METHOD_NOT_ALLOWED("MethodNotAllowed"),
    
    NOT_ACCEPTABLE("NotAcceptable"),
    
    PROXY_AUTHENTICATION_REQUIRED("ProxyAuthenticationRequired"),
    
    REQUEST_TIMEOUT("RequestTimeout"),
    
    CONFLICT("Conflict"),
    
    GONE("Gone"),
    
    LENGTH_REQUIRED("LengthRequired"),
    
    PRECONDITION_FAILED("PreconditionFailed"),
    
    REQUEST_ENTITY_TOO_LARGE("RequestEntityTooLarge"),
    
    REQUEST_URI_TOO_LONG("RequestUriTooLong"),
    
    UNSUPPORTED_MEDIA_TYPE("UnsupportedMediaType"),
    
    REQUESTED_RANGE_NOT_SATISFIABLE("RequestedRangeNotSatisfiable"),
    
    EXPECTATION_FAILED("ExpectationFailed"),
    
    MISDIRECTED_REQUEST("MisdirectedRequest"),
    
    UNPROCESSABLE_ENTITY("UnprocessableEntity"),
    
    LOCKED("Locked"),
    
    FAILED_DEPENDENCY("FailedDependency"),
    
    UPGRADE_REQUIRED("UpgradeRequired"),
    
    PRECONDITION_REQUIRED("PreconditionRequired"),
    
    TOO_MANY_REQUESTS("TooManyRequests"),
    
    REQUEST_HEADER_FIELDS_TOO_LARGE("RequestHeaderFieldsTooLarge"),
    
    UNAVAILABLE_FOR_LEGAL_REASONS("UnavailableForLegalReasons"),
    
    INTERNAL_SERVER_ERROR("InternalServerError"),
    
    NOT_IMPLEMENTED("NotImplemented"),
    
    BAD_GATEWAY("BadGateway"),
    
    SERVICE_UNAVAILABLE("ServiceUnavailable"),
    
    GATEWAY_TIMEOUT("GatewayTimeout"),
    
    HTTP_VERSION_NOT_SUPPORTED("HttpVersionNotSupported"),
    
    VARIANT_ALSO_NEGOTIATES("VariantAlsoNegotiates"),
    
    INSUFFICIENT_STORAGE("InsufficientStorage"),
    
    LOOP_DETECTED("LoopDetected"),
    
    NOT_EXTENDED("NotExtended"),
    
    NETWORK_AUTHENTICATION_REQUIRED("NetworkAuthenticationRequired");

    private String value;

    GpuInfoStatusCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GpuInfoStatusCodeEnum fromValue(String value) {
      for (GpuInfoStatusCodeEnum b : GpuInfoStatusCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GpuInfoStatusCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GpuInfoStatusCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GpuInfoStatusCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GpuInfoStatusCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GpuInfoStatusCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GPU_INFO_STATUS_CODE = "gpuInfoStatusCode";
  @SerializedName(SERIALIZED_NAME_GPU_INFO_STATUS_CODE)
  @javax.annotation.Nullable
  private GpuInfoStatusCodeEnum gpuInfoStatusCode;

  public static final String SERIALIZED_NAME_GPU_INFO_MESSAGE = "gpuInfoMessage";
  @SerializedName(SERIALIZED_NAME_GPU_INFO_MESSAGE)
  @javax.annotation.Nullable
  private String gpuInfoMessage;

  public HealthCheckInfo() {
  }

  public HealthCheckInfo filesProcessorStatus(@javax.annotation.Nullable String filesProcessorStatus) {
    this.filesProcessorStatus = filesProcessorStatus;
    return this;
  }

  /**
   * Get filesProcessorStatus
   * @return filesProcessorStatus
   */
  @javax.annotation.Nullable
  public String getFilesProcessorStatus() {
    return filesProcessorStatus;
  }

  public void setFilesProcessorStatus(@javax.annotation.Nullable String filesProcessorStatus) {
    this.filesProcessorStatus = filesProcessorStatus;
  }


  public HealthCheckInfo paraphrasingStatus(@javax.annotation.Nullable String paraphrasingStatus) {
    this.paraphrasingStatus = paraphrasingStatus;
    return this;
  }

  /**
   * Get paraphrasingStatus
   * @return paraphrasingStatus
   */
  @javax.annotation.Nullable
  public String getParaphrasingStatus() {
    return paraphrasingStatus;
  }

  public void setParaphrasingStatus(@javax.annotation.Nullable String paraphrasingStatus) {
    this.paraphrasingStatus = paraphrasingStatus;
  }


  public HealthCheckInfo detectorStatus(@javax.annotation.Nullable String detectorStatus) {
    this.detectorStatus = detectorStatus;
    return this;
  }

  /**
   * Get detectorStatus
   * @return detectorStatus
   */
  @javax.annotation.Nullable
  public String getDetectorStatus() {
    return detectorStatus;
  }

  public void setDetectorStatus(@javax.annotation.Nullable String detectorStatus) {
    this.detectorStatus = detectorStatus;
  }


  public HealthCheckInfo summarizationStatus(@javax.annotation.Nullable String summarizationStatus) {
    this.summarizationStatus = summarizationStatus;
    return this;
  }

  /**
   * Get summarizationStatus
   * @return summarizationStatus
   */
  @javax.annotation.Nullable
  public String getSummarizationStatus() {
    return summarizationStatus;
  }

  public void setSummarizationStatus(@javax.annotation.Nullable String summarizationStatus) {
    this.summarizationStatus = summarizationStatus;
  }


  public HealthCheckInfo gpuInfoStatusCode(@javax.annotation.Nullable GpuInfoStatusCodeEnum gpuInfoStatusCode) {
    this.gpuInfoStatusCode = gpuInfoStatusCode;
    return this;
  }

  /**
   * Get gpuInfoStatusCode
   * @return gpuInfoStatusCode
   */
  @javax.annotation.Nullable
  public GpuInfoStatusCodeEnum getGpuInfoStatusCode() {
    return gpuInfoStatusCode;
  }

  public void setGpuInfoStatusCode(@javax.annotation.Nullable GpuInfoStatusCodeEnum gpuInfoStatusCode) {
    this.gpuInfoStatusCode = gpuInfoStatusCode;
  }


  public HealthCheckInfo gpuInfoMessage(@javax.annotation.Nullable String gpuInfoMessage) {
    this.gpuInfoMessage = gpuInfoMessage;
    return this;
  }

  /**
   * Get gpuInfoMessage
   * @return gpuInfoMessage
   */
  @javax.annotation.Nullable
  public String getGpuInfoMessage() {
    return gpuInfoMessage;
  }

  public void setGpuInfoMessage(@javax.annotation.Nullable String gpuInfoMessage) {
    this.gpuInfoMessage = gpuInfoMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HealthCheckInfo healthCheckInfo = (HealthCheckInfo) o;
    return Objects.equals(this.filesProcessorStatus, healthCheckInfo.filesProcessorStatus) &&
        Objects.equals(this.paraphrasingStatus, healthCheckInfo.paraphrasingStatus) &&
        Objects.equals(this.detectorStatus, healthCheckInfo.detectorStatus) &&
        Objects.equals(this.summarizationStatus, healthCheckInfo.summarizationStatus) &&
        Objects.equals(this.gpuInfoStatusCode, healthCheckInfo.gpuInfoStatusCode) &&
        Objects.equals(this.gpuInfoMessage, healthCheckInfo.gpuInfoMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filesProcessorStatus, paraphrasingStatus, detectorStatus, summarizationStatus, gpuInfoStatusCode, gpuInfoMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HealthCheckInfo {\n");
    sb.append("    filesProcessorStatus: ").append(toIndentedString(filesProcessorStatus)).append("\n");
    sb.append("    paraphrasingStatus: ").append(toIndentedString(paraphrasingStatus)).append("\n");
    sb.append("    detectorStatus: ").append(toIndentedString(detectorStatus)).append("\n");
    sb.append("    summarizationStatus: ").append(toIndentedString(summarizationStatus)).append("\n");
    sb.append("    gpuInfoStatusCode: ").append(toIndentedString(gpuInfoStatusCode)).append("\n");
    sb.append("    gpuInfoMessage: ").append(toIndentedString(gpuInfoMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("filesProcessorStatus", "paraphrasingStatus", "detectorStatus", "summarizationStatus", "gpuInfoStatusCode", "gpuInfoMessage"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HealthCheckInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HealthCheckInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HealthCheckInfo is not found in the empty JSON string", HealthCheckInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HealthCheckInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HealthCheckInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("filesProcessorStatus") != null && !jsonObj.get("filesProcessorStatus").isJsonNull()) && !jsonObj.get("filesProcessorStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filesProcessorStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filesProcessorStatus").toString()));
      }
      if ((jsonObj.get("paraphrasingStatus") != null && !jsonObj.get("paraphrasingStatus").isJsonNull()) && !jsonObj.get("paraphrasingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paraphrasingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paraphrasingStatus").toString()));
      }
      if ((jsonObj.get("detectorStatus") != null && !jsonObj.get("detectorStatus").isJsonNull()) && !jsonObj.get("detectorStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detectorStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detectorStatus").toString()));
      }
      if ((jsonObj.get("summarizationStatus") != null && !jsonObj.get("summarizationStatus").isJsonNull()) && !jsonObj.get("summarizationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summarizationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summarizationStatus").toString()));
      }
      if ((jsonObj.get("gpuInfoStatusCode") != null && !jsonObj.get("gpuInfoStatusCode").isJsonNull()) && !jsonObj.get("gpuInfoStatusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gpuInfoStatusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gpuInfoStatusCode").toString()));
      }
      // validate the optional field `gpuInfoStatusCode`
      if (jsonObj.get("gpuInfoStatusCode") != null && !jsonObj.get("gpuInfoStatusCode").isJsonNull()) {
        GpuInfoStatusCodeEnum.validateJsonElement(jsonObj.get("gpuInfoStatusCode"));
      }
      if ((jsonObj.get("gpuInfoMessage") != null && !jsonObj.get("gpuInfoMessage").isJsonNull()) && !jsonObj.get("gpuInfoMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gpuInfoMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gpuInfoMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HealthCheckInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HealthCheckInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HealthCheckInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HealthCheckInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<HealthCheckInfo>() {
           @Override
           public void write(JsonWriter out, HealthCheckInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HealthCheckInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HealthCheckInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HealthCheckInfo
   * @throws IOException if the JSON string is invalid with respect to HealthCheckInfo
   */
  public static HealthCheckInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HealthCheckInfo.class);
  }

  /**
   * Convert an instance of HealthCheckInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

