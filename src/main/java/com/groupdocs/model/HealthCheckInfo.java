/*
 * GroupDocs.Rewriter API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.4.0
 * Contact: anton.perhunov@aspose.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.groupdocs.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.groupdocs.JSON;

/**
 * HealthCheckInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-24T13:25:06.936741+03:00[Europe/Moscow]", comments = "Generator version: 7.5.0")
public class HealthCheckInfo {
  public static final String SERIALIZED_NAME_FILES_PROCESSOR_STATUS = "filesProcessorStatus";
  @SerializedName(SERIALIZED_NAME_FILES_PROCESSOR_STATUS)
  private String filesProcessorStatus;

  public static final String SERIALIZED_NAME_PARAPHRASING_STATUS = "paraphrasingStatus";
  @SerializedName(SERIALIZED_NAME_PARAPHRASING_STATUS)
  private String paraphrasingStatus;

  public static final String SERIALIZED_NAME_DETECTOR_STATUS = "detectorStatus";
  @SerializedName(SERIALIZED_NAME_DETECTOR_STATUS)
  private String detectorStatus;

  public static final String SERIALIZED_NAME_SUMMARIZATION_STATUS = "summarizationStatus";
  @SerializedName(SERIALIZED_NAME_SUMMARIZATION_STATUS)
  private String summarizationStatus;

  public HealthCheckInfo() {
  }

  public HealthCheckInfo filesProcessorStatus(String filesProcessorStatus) {
    this.filesProcessorStatus = filesProcessorStatus;
    return this;
  }

   /**
   * Get filesProcessorStatus
   * @return filesProcessorStatus
  **/
  @javax.annotation.Nullable
  public String getFilesProcessorStatus() {
    return filesProcessorStatus;
  }

  public void setFilesProcessorStatus(String filesProcessorStatus) {
    this.filesProcessorStatus = filesProcessorStatus;
  }


  public HealthCheckInfo paraphrasingStatus(String paraphrasingStatus) {
    this.paraphrasingStatus = paraphrasingStatus;
    return this;
  }

   /**
   * Get paraphrasingStatus
   * @return paraphrasingStatus
  **/
  @javax.annotation.Nullable
  public String getParaphrasingStatus() {
    return paraphrasingStatus;
  }

  public void setParaphrasingStatus(String paraphrasingStatus) {
    this.paraphrasingStatus = paraphrasingStatus;
  }


  public HealthCheckInfo detectorStatus(String detectorStatus) {
    this.detectorStatus = detectorStatus;
    return this;
  }

   /**
   * Get detectorStatus
   * @return detectorStatus
  **/
  @javax.annotation.Nullable
  public String getDetectorStatus() {
    return detectorStatus;
  }

  public void setDetectorStatus(String detectorStatus) {
    this.detectorStatus = detectorStatus;
  }


  public HealthCheckInfo summarizationStatus(String summarizationStatus) {
    this.summarizationStatus = summarizationStatus;
    return this;
  }

   /**
   * Get summarizationStatus
   * @return summarizationStatus
  **/
  @javax.annotation.Nullable
  public String getSummarizationStatus() {
    return summarizationStatus;
  }

  public void setSummarizationStatus(String summarizationStatus) {
    this.summarizationStatus = summarizationStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HealthCheckInfo healthCheckInfo = (HealthCheckInfo) o;
    return Objects.equals(this.filesProcessorStatus, healthCheckInfo.filesProcessorStatus) &&
        Objects.equals(this.paraphrasingStatus, healthCheckInfo.paraphrasingStatus) &&
        Objects.equals(this.detectorStatus, healthCheckInfo.detectorStatus) &&
        Objects.equals(this.summarizationStatus, healthCheckInfo.summarizationStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filesProcessorStatus, paraphrasingStatus, detectorStatus, summarizationStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HealthCheckInfo {\n");
    sb.append("    filesProcessorStatus: ").append(toIndentedString(filesProcessorStatus)).append("\n");
    sb.append("    paraphrasingStatus: ").append(toIndentedString(paraphrasingStatus)).append("\n");
    sb.append("    detectorStatus: ").append(toIndentedString(detectorStatus)).append("\n");
    sb.append("    summarizationStatus: ").append(toIndentedString(summarizationStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filesProcessorStatus");
    openapiFields.add("paraphrasingStatus");
    openapiFields.add("detectorStatus");
    openapiFields.add("summarizationStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to HealthCheckInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HealthCheckInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HealthCheckInfo is not found in the empty JSON string", HealthCheckInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HealthCheckInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HealthCheckInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("filesProcessorStatus") != null && !jsonObj.get("filesProcessorStatus").isJsonNull()) && !jsonObj.get("filesProcessorStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filesProcessorStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filesProcessorStatus").toString()));
      }
      if ((jsonObj.get("paraphrasingStatus") != null && !jsonObj.get("paraphrasingStatus").isJsonNull()) && !jsonObj.get("paraphrasingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paraphrasingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paraphrasingStatus").toString()));
      }
      if ((jsonObj.get("detectorStatus") != null && !jsonObj.get("detectorStatus").isJsonNull()) && !jsonObj.get("detectorStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detectorStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detectorStatus").toString()));
      }
      if ((jsonObj.get("summarizationStatus") != null && !jsonObj.get("summarizationStatus").isJsonNull()) && !jsonObj.get("summarizationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summarizationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summarizationStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HealthCheckInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HealthCheckInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HealthCheckInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HealthCheckInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<HealthCheckInfo>() {
           @Override
           public void write(JsonWriter out, HealthCheckInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HealthCheckInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HealthCheckInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HealthCheckInfo
  * @throws IOException if the JSON string is invalid with respect to HealthCheckInfo
  */
  public static HealthCheckInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HealthCheckInfo.class);
  }

 /**
  * Convert an instance of HealthCheckInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

