/*
 * GroupDocs.Rewriter API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 25.7.0
 * Contact: anton.perhunov@aspose.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.groupdocs.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.groupdocs.JSON;

/**
 * SynonymizeTextRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-18T14:46:11.043203+03:00[Europe/Moscow]", comments = "Generator version: 7.14.0")
public class SynonymizeTextRequest {
  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  @javax.annotation.Nonnull
  private String language;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  @javax.annotation.Nullable
  private String text;

  public static final String SERIALIZED_NAME_TEXTS = "texts";
  @SerializedName(SERIALIZED_NAME_TEXTS)
  @javax.annotation.Nullable
  private List<String> texts = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  @javax.annotation.Nullable
  private String origin;

  public static final String SERIALIZED_NAME_DETECT_LANGUAGE = "detectLanguage";
  @SerializedName(SERIALIZED_NAME_DETECT_LANGUAGE)
  @javax.annotation.Nullable
  private Boolean detectLanguage;

  /**
   * Number of variants for rewriting
   */
  @JsonAdapter(SynonymsEnum.Adapter.class)
  public enum SynonymsEnum {
    ALL("All"),
    
    ONE("One"),
    
    TWO("Two"),
    
    THREE("Three"),
    
    FOUR("Four"),
    
    FIVE("Five");

    private String value;

    SynonymsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SynonymsEnum fromValue(String value) {
      for (SynonymsEnum b : SynonymsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SynonymsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SynonymsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SynonymsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SynonymsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SynonymsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYNONYMS = "synonyms";
  @SerializedName(SERIALIZED_NAME_SYNONYMS)
  @javax.annotation.Nullable
  private SynonymsEnum synonyms;

  public SynonymizeTextRequest() {
  }

  public SynonymizeTextRequest language(@javax.annotation.Nonnull String language) {
    this.language = language;
    return this;
  }

  /**
   * Set language of text
   * @return language
   */
  @javax.annotation.Nonnull
  public String getLanguage() {
    return language;
  }

  public void setLanguage(@javax.annotation.Nonnull String language) {
    this.language = language;
  }


  public SynonymizeTextRequest text(@javax.annotation.Nullable String text) {
    this.text = text;
    return this;
  }

  /**
   * Single text paragraph
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(@javax.annotation.Nullable String text) {
    this.text = text;
  }


  public SynonymizeTextRequest texts(@javax.annotation.Nullable List<String> texts) {
    this.texts = texts;
    return this;
  }

  public SynonymizeTextRequest addTextsItem(String textsItem) {
    if (this.texts == null) {
      this.texts = new ArrayList<>();
    }
    this.texts.add(textsItem);
    return this;
  }

  /**
   * Text paragraphs
   * @return texts
   */
  @javax.annotation.Nullable
  public List<String> getTexts() {
    return texts;
  }

  public void setTexts(@javax.annotation.Nullable List<String> texts) {
    this.texts = texts;
  }


  public SynonymizeTextRequest origin(@javax.annotation.Nullable String origin) {
    this.origin = origin;
    return this;
  }

  /**
   * Information about SDK user, like a User-Agent
   * @return origin
   */
  @javax.annotation.Nullable
  public String getOrigin() {
    return origin;
  }

  public void setOrigin(@javax.annotation.Nullable String origin) {
    this.origin = origin;
  }


  public SynonymizeTextRequest detectLanguage(@javax.annotation.Nullable Boolean detectLanguage) {
    this.detectLanguage = detectLanguage;
    return this;
  }

  /**
   * If language should be auto detected
   * @return detectLanguage
   */
  @javax.annotation.Nullable
  public Boolean getDetectLanguage() {
    return detectLanguage;
  }

  public void setDetectLanguage(@javax.annotation.Nullable Boolean detectLanguage) {
    this.detectLanguage = detectLanguage;
  }


  public SynonymizeTextRequest synonyms(@javax.annotation.Nullable SynonymsEnum synonyms) {
    this.synonyms = synonyms;
    return this;
  }

  /**
   * Number of variants for rewriting
   * @return synonyms
   */
  @javax.annotation.Nullable
  public SynonymsEnum getSynonyms() {
    return synonyms;
  }

  public void setSynonyms(@javax.annotation.Nullable SynonymsEnum synonyms) {
    this.synonyms = synonyms;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SynonymizeTextRequest synonymizeTextRequest = (SynonymizeTextRequest) o;
    return Objects.equals(this.language, synonymizeTextRequest.language) &&
        Objects.equals(this.text, synonymizeTextRequest.text) &&
        Objects.equals(this.texts, synonymizeTextRequest.texts) &&
        Objects.equals(this.origin, synonymizeTextRequest.origin) &&
        Objects.equals(this.detectLanguage, synonymizeTextRequest.detectLanguage) &&
        Objects.equals(this.synonyms, synonymizeTextRequest.synonyms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(language, text, texts, origin, detectLanguage, synonyms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SynonymizeTextRequest {\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    texts: ").append(toIndentedString(texts)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    detectLanguage: ").append(toIndentedString(detectLanguage)).append("\n");
    sb.append("    synonyms: ").append(toIndentedString(synonyms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("language", "text", "texts", "origin", "detectLanguage", "synonyms"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("language"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SynonymizeTextRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SynonymizeTextRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SynonymizeTextRequest is not found in the empty JSON string", SynonymizeTextRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SynonymizeTextRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SynonymizeTextRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SynonymizeTextRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("texts") != null && !jsonObj.get("texts").isJsonNull() && !jsonObj.get("texts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `texts` to be an array in the JSON string but got `%s`", jsonObj.get("texts").toString()));
      }
      if ((jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) && !jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      if ((jsonObj.get("synonyms") != null && !jsonObj.get("synonyms").isJsonNull()) && !jsonObj.get("synonyms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `synonyms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("synonyms").toString()));
      }
      // validate the optional field `synonyms`
      if (jsonObj.get("synonyms") != null && !jsonObj.get("synonyms").isJsonNull()) {
        SynonymsEnum.validateJsonElement(jsonObj.get("synonyms"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SynonymizeTextRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SynonymizeTextRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SynonymizeTextRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SynonymizeTextRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SynonymizeTextRequest>() {
           @Override
           public void write(JsonWriter out, SynonymizeTextRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SynonymizeTextRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SynonymizeTextRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SynonymizeTextRequest
   * @throws IOException if the JSON string is invalid with respect to SynonymizeTextRequest
   */
  public static SynonymizeTextRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SynonymizeTextRequest.class);
  }

  /**
   * Convert an instance of SynonymizeTextRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

