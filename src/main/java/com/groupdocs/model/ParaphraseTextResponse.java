/*
 * GroupDocs.Rewriter API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.4.0
 * Contact: anton.perhunov@aspose.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.groupdocs.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.groupdocs.model.HttpStatusCode;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.groupdocs.JSON;

/**
 * ParaphraseTextResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-24T13:25:06.936741+03:00[Europe/Moscow]", comments = "Generator version: 7.5.0")
public class ParaphraseTextResponse {
  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private HttpStatusCode status;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_PARAPHRASE_REULT = "paraphraseReult";
  @SerializedName(SERIALIZED_NAME_PARAPHRASE_REULT)
  private String paraphraseReult;

  public static final String SERIALIZED_NAME_PARAPHRASE_RESULTS = "paraphraseResults";
  @SerializedName(SERIALIZED_NAME_PARAPHRASE_RESULTS)
  private List<String> paraphraseResults;

  public static final String SERIALIZED_NAME_SOURCE_LIST = "sourceList";
  @SerializedName(SERIALIZED_NAME_SOURCE_LIST)
  private List<String> sourceList;

  public static final String SERIALIZED_NAME_TARGET_LIST = "targetList";
  @SerializedName(SERIALIZED_NAME_TARGET_LIST)
  private List<String> targetList;

  public ParaphraseTextResponse() {
  }

  public ParaphraseTextResponse status(HttpStatusCode status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public HttpStatusCode getStatus() {
    return status;
  }

  public void setStatus(HttpStatusCode status) {
    this.status = status;
  }


  public ParaphraseTextResponse message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Information about process
   * @return message
  **/
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public ParaphraseTextResponse paraphraseReult(String paraphraseReult) {
    this.paraphraseReult = paraphraseReult;
    return this;
  }

   /**
   * Get paraphraseReult
   * @return paraphraseReult
  **/
  @javax.annotation.Nullable
  public String getParaphraseReult() {
    return paraphraseReult;
  }

  public void setParaphraseReult(String paraphraseReult) {
    this.paraphraseReult = paraphraseReult;
  }


  public ParaphraseTextResponse paraphraseResults(List<String> paraphraseResults) {
    this.paraphraseResults = paraphraseResults;
    return this;
  }

  public ParaphraseTextResponse addParaphraseResultsItem(String paraphraseResultsItem) {
    if (this.paraphraseResults == null) {
      this.paraphraseResults = new ArrayList<>();
    }
    this.paraphraseResults.add(paraphraseResultsItem);
    return this;
  }

   /**
   * Get paraphraseResults
   * @return paraphraseResults
  **/
  @javax.annotation.Nullable
  public List<String> getParaphraseResults() {
    return paraphraseResults;
  }

  public void setParaphraseResults(List<String> paraphraseResults) {
    this.paraphraseResults = paraphraseResults;
  }


  public ParaphraseTextResponse sourceList(List<String> sourceList) {
    this.sourceList = sourceList;
    return this;
  }

  public ParaphraseTextResponse addSourceListItem(String sourceListItem) {
    if (this.sourceList == null) {
      this.sourceList = new ArrayList<>();
    }
    this.sourceList.add(sourceListItem);
    return this;
  }

   /**
   * Return tokenized source text
   * @return sourceList
  **/
  @javax.annotation.Nullable
  public List<String> getSourceList() {
    return sourceList;
  }

  public void setSourceList(List<String> sourceList) {
    this.sourceList = sourceList;
  }


  public ParaphraseTextResponse targetList(List<String> targetList) {
    this.targetList = targetList;
    return this;
  }

  public ParaphraseTextResponse addTargetListItem(String targetListItem) {
    if (this.targetList == null) {
      this.targetList = new ArrayList<>();
    }
    this.targetList.add(targetListItem);
    return this;
  }

   /**
   * Return tokenized target text
   * @return targetList
  **/
  @javax.annotation.Nullable
  public List<String> getTargetList() {
    return targetList;
  }

  public void setTargetList(List<String> targetList) {
    this.targetList = targetList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParaphraseTextResponse paraphraseTextResponse = (ParaphraseTextResponse) o;
    return Objects.equals(this.status, paraphraseTextResponse.status) &&
        Objects.equals(this.message, paraphraseTextResponse.message) &&
        Objects.equals(this.paraphraseReult, paraphraseTextResponse.paraphraseReult) &&
        Objects.equals(this.paraphraseResults, paraphraseTextResponse.paraphraseResults) &&
        Objects.equals(this.sourceList, paraphraseTextResponse.sourceList) &&
        Objects.equals(this.targetList, paraphraseTextResponse.targetList);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, message, paraphraseReult, paraphraseResults, sourceList, targetList);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParaphraseTextResponse {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    paraphraseReult: ").append(toIndentedString(paraphraseReult)).append("\n");
    sb.append("    paraphraseResults: ").append(toIndentedString(paraphraseResults)).append("\n");
    sb.append("    sourceList: ").append(toIndentedString(sourceList)).append("\n");
    sb.append("    targetList: ").append(toIndentedString(targetList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("status");
    openapiFields.add("message");
    openapiFields.add("paraphraseReult");
    openapiFields.add("paraphraseResults");
    openapiFields.add("sourceList");
    openapiFields.add("targetList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ParaphraseTextResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ParaphraseTextResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ParaphraseTextResponse is not found in the empty JSON string", ParaphraseTextResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ParaphraseTextResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ParaphraseTextResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        HttpStatusCode.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("paraphraseReult") != null && !jsonObj.get("paraphraseReult").isJsonNull()) && !jsonObj.get("paraphraseReult").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paraphraseReult` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paraphraseReult").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("paraphraseResults") != null && !jsonObj.get("paraphraseResults").isJsonNull() && !jsonObj.get("paraphraseResults").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `paraphraseResults` to be an array in the JSON string but got `%s`", jsonObj.get("paraphraseResults").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sourceList") != null && !jsonObj.get("sourceList").isJsonNull() && !jsonObj.get("sourceList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceList` to be an array in the JSON string but got `%s`", jsonObj.get("sourceList").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("targetList") != null && !jsonObj.get("targetList").isJsonNull() && !jsonObj.get("targetList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetList` to be an array in the JSON string but got `%s`", jsonObj.get("targetList").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ParaphraseTextResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ParaphraseTextResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ParaphraseTextResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ParaphraseTextResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ParaphraseTextResponse>() {
           @Override
           public void write(JsonWriter out, ParaphraseTextResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ParaphraseTextResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ParaphraseTextResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ParaphraseTextResponse
  * @throws IOException if the JSON string is invalid with respect to ParaphraseTextResponse
  */
  public static ParaphraseTextResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ParaphraseTextResponse.class);
  }

 /**
  * Convert an instance of ParaphraseTextResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

