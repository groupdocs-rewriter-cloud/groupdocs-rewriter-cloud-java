/*
 * GroupDocs.Rewriter API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.4.0
 * Contact: anton.perhunov@aspose.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.groupdocs.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.groupdocs.model.Opt;
import com.groupdocs.model.Tokenizer;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.groupdocs.JSON;

/**
 * Model
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-24T13:25:06.936741+03:00[Europe/Moscow]", comments = "Generator version: 7.5.0")
public class Model {
  public static final String SERIALIZED_NAME_LOADED = "loaded";
  @SerializedName(SERIALIZED_NAME_LOADED)
  private Boolean loaded;

  public static final String SERIALIZED_NAME_MODELS_ID = "models_id";
  @SerializedName(SERIALIZED_NAME_MODELS_ID)
  private Integer modelsId;

  public static final String SERIALIZED_NAME_MODELS = "models";
  @SerializedName(SERIALIZED_NAME_MODELS)
  private List<String> models = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPT = "opt";
  @SerializedName(SERIALIZED_NAME_OPT)
  private Opt opt;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Integer timeout;

  public static final String SERIALIZED_NAME_TOKENIZER = "tokenizer";
  @SerializedName(SERIALIZED_NAME_TOKENIZER)
  private Tokenizer tokenizer;

  public Model() {
  }

  public Model loaded(Boolean loaded) {
    this.loaded = loaded;
    return this;
  }

   /**
   * Get loaded
   * @return loaded
  **/
  @javax.annotation.Nullable
  public Boolean getLoaded() {
    return loaded;
  }

  public void setLoaded(Boolean loaded) {
    this.loaded = loaded;
  }


  public Model modelsId(Integer modelsId) {
    this.modelsId = modelsId;
    return this;
  }

   /**
   * Get modelsId
   * @return modelsId
  **/
  @javax.annotation.Nullable
  public Integer getModelsId() {
    return modelsId;
  }

  public void setModelsId(Integer modelsId) {
    this.modelsId = modelsId;
  }


  public Model models(List<String> models) {
    this.models = models;
    return this;
  }

  public Model addModelsItem(String modelsItem) {
    if (this.models == null) {
      this.models = new ArrayList<>();
    }
    this.models.add(modelsItem);
    return this;
  }

   /**
   * Get models
   * @return models
  **/
  @javax.annotation.Nullable
  public List<String> getModels() {
    return models;
  }

  public void setModels(List<String> models) {
    this.models = models;
  }


  public Model opt(Opt opt) {
    this.opt = opt;
    return this;
  }

   /**
   * Get opt
   * @return opt
  **/
  @javax.annotation.Nullable
  public Opt getOpt() {
    return opt;
  }

  public void setOpt(Opt opt) {
    this.opt = opt;
  }


  public Model timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

   /**
   * Get timeout
   * @return timeout
  **/
  @javax.annotation.Nullable
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }


  public Model tokenizer(Tokenizer tokenizer) {
    this.tokenizer = tokenizer;
    return this;
  }

   /**
   * Get tokenizer
   * @return tokenizer
  **/
  @javax.annotation.Nullable
  public Tokenizer getTokenizer() {
    return tokenizer;
  }

  public void setTokenizer(Tokenizer tokenizer) {
    this.tokenizer = tokenizer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Model model = (Model) o;
    return Objects.equals(this.loaded, model.loaded) &&
        Objects.equals(this.modelsId, model.modelsId) &&
        Objects.equals(this.models, model.models) &&
        Objects.equals(this.opt, model.opt) &&
        Objects.equals(this.timeout, model.timeout) &&
        Objects.equals(this.tokenizer, model.tokenizer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loaded, modelsId, models, opt, timeout, tokenizer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Model {\n");
    sb.append("    loaded: ").append(toIndentedString(loaded)).append("\n");
    sb.append("    modelsId: ").append(toIndentedString(modelsId)).append("\n");
    sb.append("    models: ").append(toIndentedString(models)).append("\n");
    sb.append("    opt: ").append(toIndentedString(opt)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    tokenizer: ").append(toIndentedString(tokenizer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("loaded");
    openapiFields.add("models_id");
    openapiFields.add("models");
    openapiFields.add("opt");
    openapiFields.add("timeout");
    openapiFields.add("tokenizer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Model
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Model.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Model is not found in the empty JSON string", Model.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Model.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Model` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("models") != null && !jsonObj.get("models").isJsonNull() && !jsonObj.get("models").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `models` to be an array in the JSON string but got `%s`", jsonObj.get("models").toString()));
      }
      // validate the optional field `opt`
      if (jsonObj.get("opt") != null && !jsonObj.get("opt").isJsonNull()) {
        Opt.validateJsonElement(jsonObj.get("opt"));
      }
      // validate the optional field `tokenizer`
      if (jsonObj.get("tokenizer") != null && !jsonObj.get("tokenizer").isJsonNull()) {
        Tokenizer.validateJsonElement(jsonObj.get("tokenizer"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Model.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Model' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Model> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Model.class));

       return (TypeAdapter<T>) new TypeAdapter<Model>() {
           @Override
           public void write(JsonWriter out, Model value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Model read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Model given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Model
  * @throws IOException if the JSON string is invalid with respect to Model
  */
  public static Model fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Model.class);
  }

 /**
  * Convert an instance of Model to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

